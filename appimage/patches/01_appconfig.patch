+++ ./opt/python3.10/lib/python3.10/site-packages/appconfig/appConfig.py	2023-07-26 11:46:25.868183171 +0200
@@ -5,7 +5,6 @@
 import tempfile
 import base64
 import subprocess
-from appconfig.appConfigN4d import appConfigN4d
 
 class appConfig():
 	def __init__(self):
@@ -13,12 +12,8 @@
 		self.confFile="appconfig.conf"
 		self.home=os.environ.get('HOME',"/usr/share/{}".format(self.confFile.split('.')[0]))
 		self.localConf=self.confFile
-		self.n4dConf="n4d-{}".format(self.confFile)
-		self.baseDirs={"user":"{}/.config".format(self.home),"system":"/usr/share/{}".format(self.confFile.split('.')[0]),"n4d":"/usr/share/{}".format(self.confFile.split('.')[0])}
-		self.config={'user':{},'system':{},'n4d':{}}
-		self.n4dcredentials=[]
-		self.server="172.20.9.174"
-		self.n4d=appConfigN4d()
++		self.baseDirs={"user":"{}/.config".format(self.home),"system":"/usr/share/{}".format(self.confFile.split('.')[0])}
++		self.config={'user':{},'system':{}}
 		self._debug("Init")
 	#def __init__
 
@@ -34,15 +29,12 @@
 
 	def set_baseDirs(self,dirs):
 		self.baseDirs=dirs.copy()
-		if 'nd4' not in self.baseDirs.keys():
-			self.baseDirs['n4d']=self.baseDirs['system']
 		self._debug("baseDirs: %s"%self.baseDirs)
 	#def set_baseDirs
 
 	def set_configFile(self,confFile):
 		self.confFile=confFile
 		self.localConf=self.confFile
-		self.n4dConf=self.confFile.split('.')[0]
 		self._debug("ConfFile: %s"%self.confFile)
 	#def set_confFile
 
@@ -53,8 +45,6 @@
 			confFile.update({level:conf})
 		else:
 			for level,item in self.baseDirs.items():
-				if level=='n4d':
-					continue
 				conf=os.path.join(item,self.confFile)
 				confFile.update({level:conf})
 		return confFile
@@ -86,22 +76,16 @@
 	#def getLevel
 
 	def getConfig(self,level=None,exclude=[]):
-		self.config={'user':{},'system':{},'n4d':{}}
-		if level=='n4d':
-#			self.confFile=self.n4dConf
-			self._read_config_from_n4d(exclude)
-		else:
-			self.confFile=self.localConf
-			if self._read_config_from_system(level,exclude)==False:
-#				self.confFile=self.n4dConf
-				self._read_config_from_n4d(exclude)
-				self.config['system']['config']='n4d'
-				level="n4d"
-			#check and force level value if None
-			if not isinstance(level,str):
-				self._debug("Forcing value for level")
-				level=self.config.get('system',{}).get('config','user')
-				self._debug("Level: {}".format(level))
+		self.config={'user':{},'system':{}}
+		self.confFile=self.localConf
+		if self._read_config_from_system(level,exclude)==False:
+			self.config['system']['config']='user'
+			level="user"
+		#check and force level value if None
+		if not isinstance(level,str):
+			self._debug("Forcing value for level")
+			level=self.config.get('system',{}).get('config','user')
+			self._debug("Level: {}".format(level))
 
 		if self.config[level]=={}:
 			self.config[level]['config']=level
@@ -185,11 +169,7 @@
 					if not key in newConf[level].keys():
 						newConf[level][key]=None
 					newConf[level][key]=data[key]
-			if level=='n4d':
-				self._debug("Sending config to n4d")
-				retval=self._write_config_to_n4d(newConf)
-			else:
-				retval=self._write_config_to_system(newConf,level)
+			retval=self._write_config_to_system(newConf,level)
 		return (retval)
 	#def write_config
 
@@ -222,34 +202,3 @@
 		return (retval)
 	#def _write_config_to_system
 
-	def _write_config_to_n4d(self,conf):
-		ret=self.n4d.writeConfig(n4dparms="{},{}".format(self.confFile,conf['n4d']))
-		self._debug("N4d returns: {}".format(ret))
-		return(ret)
-	#def _write_config_to_n4d
-	
-	def _read_config_from_n4d(self,exclude=[]):
-		tmpStr="{}"
-		ret=self.n4d.readConfig(n4dparms="{}".format(self.confFile),exclude=exclude)
-		self.config.update({'n4d':ret})
-		return(ret)
-	#def _read_config_from_n4d
-
-	def n4dGetVar(self,client=None,var=''):
-		ret=self.n4d.n4dGetVar(client,var)
-		return(ret)
-	#def n4dQuery
-	
-	def n4dSetVar(self,client=None,var='',val={}):
-		ret=self.n4d.n4dSetVar(client,var,val)
-		return(ret)
-	#def n4dQuery
-	
-	def n4dDelVar(self,client=None,var=''):
-		ret=self.n4d.n4dDelVar(client,var)
-		return(ret)
-	#def n4dQuery
-
-	def n4dQuery(self,n4dclass,n4dmethod,*args,**kwargs):
-		ret=self.n4d.n4dQuery(n4dclass,n4dmethod,*args,**kwargs)
-		return(ret)
